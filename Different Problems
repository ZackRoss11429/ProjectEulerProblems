// Project Euler Projects
package org.example;
import java.math.BigInteger;
import java.util.ArrayList;
import java.lang.Math;
import java.util.Arrays;

/*public class Main {
    public Main() {
    }

    public static void findMultiples(String[] args) {
        ArrayList<Integer> multiples = new ArrayList<Integer>();
        int sum = 0;
        for(int i = 1; i < 1000; i++) {
            if(i % 3 == 0 || i % 5 == 0) {
                multiples.add(i);
                sum += i;
            }
        }
        System.out.println(multiples);
        System.out.println(sum);
    }
    public static void main(String[] args) {
        findMultiples(args);
    }
}*/
/*public class Main {
    public Main() {
    }

    public static void findFibonacci(String[] args) {
        ArrayList<Integer> fibonacci = new ArrayList<Integer>();
        fibonacci.add(1);
        fibonacci.add(1);
        int i = 1;
        while(fibonacci.get(i) < 4000000) {
            fibonacci.add(fibonacci.get(i) + fibonacci.get(i - 1));
            i++;
            }
        fibonacci.remove(i);
        System.out.println(fibonacci);
    }

    public static void main(String[] args) {
        findFibonacci(args);
    }
}*/
/*class Main {
    public static void main(String[] args) {
        int number = (int) 60085147575143L;
        double squareroot = Math.pow(number, 0.5);
        for(double i = 0; i > number; i++) {
            if(number % i == 0 && i <= squareroot) {
                System.out.println(i);

            }
        }
    }
}*/

/*class Main {
    public static void main(String[] args) {
        int factor1 = 999;
        int factor2 = 999;
        int largestproduct = factor1*factor2;
        for(int i = (factor1 * factor2); i>0; i--) {
            for(int x = 0; x
                splitproduct.set(x, );
            }
        }


    }
}*/

/*class Main {
    public static void main(String[] args){
        int numberTail = 100;
        int sum = 0; // sum of squares (eg (1+2+3+4...)^2)
        int squareSum = 0; // sum of squares (eg 1^2 + 2^2 etc)
        for(int i = 1; i<=numberTail; i++) {
            sum += i;
            squareSum += i*i;
        }
        sum = sum*sum;
        System.out.println(sum - squareSum);
    }
}*/

/*class Main {
    public static void main(String[] args) {
        int n = 10001;
        int numberSize = 1000000;
        ArrayList<Integer> isPrime = new ArrayList<>();

        for(int i = 2; i<numberSize; i++) {
            boolean prime = true;
            for(int j = 2; j<=Math.sqrt(i); j++) {
                if(i % j == 0) {
                    prime = false;
                    break;
                }
            }
            if(prime) {
                isPrime.add(i);
                if(isPrime.size() == n) {
                    break;
                }
            }
        }
        System.out.println(isPrime.get(n-1));
    }
}*/

class Main {
    public static void main(String[] args) {
        BigInteger number = new BigInteger("7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450");
        int digitsAmount = number.toString().length();
        // split number into list
        String[] splitNumber = new String[digitsAmount];
        int product = 1;
        int comparableProduct = 1;
        int indexSet = 0;
        //int divisionFactor = digitsAmount-13;
        boolean lessThanThirteenDigits = false;
        while(!lessThanThirteenDigits) {
            for(int i = indexSet; i<13 + indexSet; i++) {
                comparableProduct *= Integer.parseInt(splitNumber[i]);
                if(comparableProduct >= product) {
                    product =comparableProduct;
                    indexSet += 1;
                    // check when using last 13 digits
                }
            }
        }
    }
}
